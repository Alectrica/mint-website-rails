- set_meta_tags title: 'Guide / Reference / Built in Types'

%h1 Built in Types

%p
  Mint comes with several built in types. These are used in control expressions:
  %code Promise
  ,
  %code Result
  ,
  %code Void
  and
  = succeed "." do
    %code Never
  The
  %code Maybe
  type represents a
  %a(href="https://stackoverflow.com/questions/5913200/why-is-it-called-nillable") nillable
  value.

%h2 Promise

%p
  The promise type represents a
  %a(href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise")
    JavaScript promise
  \- an asynchronous computational task that might fail.

%p
  In Mint promises have two parameters
  %code Promise(error, result)
  \:

%ul
  %li
    %b error
    \- the type of the error

  %li
    %b result
    \- the type of the result

%p A good example is a HTTP request which in Mint looks like this:

%pre
  %code
    :escaped
      Promise(Http.ErrorResponse, Http.Response)

%p
  where
  %code Http.ErrorResponse
  is a record containing information about the error that happened while
  %code Http.Response
  is a record containing the response of the request.

%p
  Promises are used in a
  %a(href="/guide/reference/control-expressions/sequence")
    sequence
  and
  %a(href="/guide/reference/control-expressions/parallel")
    parallel
  expressions.

%h2 Result

%p
  The result type, represents a
  %b synchronous
  task that might fail. It is defined as an

  = succeed ":" do
    %b enum

%pre
  %code
    :escaped
      enum Result(error, value) {
        Err(error)
        Ok(value)
      }

%p
  In Mint, results have two parameters

  = succeed ":" do
    %code Result(error, value)

%ul
  %li
    %b error
    \- the type of the error

  %li
    %b value
    \- the type of the value in the Ok case

%p
  For example, converting a
  %code String
  to a

  = succeed ":" do
    %code Number

%ul
  %li
    If the conversion fails we get an error:

    %pre
      %code
        :escaped
          "blah"
          |> Number.fromString()
          |> Maybe.toResult("Conversion failed.")
          |> Result.isError() /* true */

  %li
    If the conversion succeeds we get a value

    %pre
      %code
        :escaped
          "10"
          |> Number.fromString()
          |> Maybe.toResult("Conversion failed.")
          |> Result.isOk() /* true */

%p
  Results are used in
  %a(href="/guide/reference/control-expressions/sequence")
    sequence
  ,
  %a(href="/guide/reference/control-expressions/parallel")
    parallel
  and
  %a(href="/guide/reference/control-expressions/try")
    try
  expressions.

%h2 Void

%p
  The void type represents an expression which cannot have any value.

%p
  %code Void
  can only be explicitly returned with the
  %code void
  keyword.

%h2 Never

%p
  The never type is used to describe tasks (promises or results) that can never
  fail. For example, here is the type of task that can never fail:
  %code Promise(Never, String)

%p
  These tasks don't need to be caught in
  %a(href="/guide/reference/control-expressions/sequence")
    sequence
  ,
  %a(href="/guide/reference/control-expressions/parallel")
    parallel
  and
  %a(href="/guide/reference/control-expressions/try")
    try
  expressions.

%h2 Maybe

%p
  The maybe type represents a value which may or may not exist. It's defined as an

  = succeed ":" do
    %b enum

%pre
  %code
    :escaped
      enum Maybe(value) {
        Just(value)
        Nothing()
      }

%p
  For example here is a user who may or may not have a car:

%pre
  %code
    :escaped
      record Car {
        type : String,
        engine : String
      }

      record User {
        name : String,
        car : Maybe(Car)
      }
