- set_meta_tags title: "Blog / Creating Packages"

%p
  Mint has built in support for packages - code shared on any public Git
  repository - which allows you to share Components, Modules and even Stores
  with others.

%h2 Creating a package

%p
  In this post we will create a package for a
  %code textarea
  which has a built in counter.

%p
  First we need to create a new Mint application (which itself is a package):

%pre
  %code.plaintext
    :escaped
      ➜  Projects git:(master) ✗ mint init mint-textarea-counter
      Mint - Initializing a new project
      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
      ⚙ Creating directory structure...
      ⚙ Writing initial files...

      There are no dependencies!

      There is nothing to do!
      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

%h2 Adding a component

%p
  Instead of a
  %code Main
  component we will create one for the
  %code textarea
  named
  %code Textarea.Counter
  (
  %code source/Texarea.Counter.mint
  ):

%pre
  %code
    :escaped
      component Textarea.Counter {
        property onChange : Function(String, Promise(Never, Void)) =
          (value : String) : Promise(Never, Void) { next { } }

        property value : String = ""

        style base {
          border: 1px solid #DDD;

          flex-direction: column;
          display: inline-flex;
        }

        style textarea {
          font-family: sans-serif;
          font-size: 16px;

          padding: 10px;
          margin: 0;
          border: 0;
        }

        style counter {
          font-family: sans-serif;
          background: #EEE;
          font-size: 14px;
          padding: 10px;
        }

        fun handleChange (event : Html.Event) : Promise(Never, Void) {
          event.target
          |> Dom.getValue()
          |> onChange()
        }

        fun render : Html {
          <div::base>
            <div::counter>
              "Character Count: "

              <{
                value
                |> String.size()
                |> Number.toString()
              }>
            </div>

            <textarea::textarea
              onChange={handleChange}
              value={value}/>
          </div>
        }
      }

%p
  %i
    During development I suggest creating a
    %code Main
    component for testing which is not added to the Git repository.

%h2 Creating the Git repository

%p
  To share this component with others we need to create a Git repository, in
  this case we will created one on Github and we need to push our code to it:

%pre
  %code.plaintext
    :escaped
      ➜  mint-textarea-counter ✗ git init
      Initialized empty Git repository in /home/.../mint-textarea-counter/.git/

      ➜  mint-textarea-counter git:(master) ✗ git remote add origin .../mint-textarea-counter.git

      ➜  mint-textarea-counter git:(master) ✗ git add .

      ➜  mint-textarea-counter git:(master) ✗ git commit -m "Initial commit."
      [master (root-commit) 5250277] Initial commit.
       3 files changed, 60 insertions(+)
       create mode 100644 .gitignore
       create mode 100644 mint.json
       create mode 100644 source/Textarea.Counter.mint

      ➜  mint-textarea-counter git:(master) git push origin HEAD

%p
  Now we have the repository set up, the next thing is to create a tag for the
  first version:

%pre
  %code.plaintext
    :escaped
      ➜  mint-textarea-counter git:(master) git tag 1.0.0
      ➜  mint-textarea-counter git:(master) git push origin HEAD --tags
      Total 0 (delta 0), reused 0 (delta 0)
      To github.com:mint-lang/mint-textarea-counter.git
       * [new tag]         1.0.0 -> 1.0.0

%p
  Now the package is ready to be used.

%h2 Using the package

%p
  In an other Mint application we can use this package by defining it as a
  dependency in
  %code dependencies
  field in
  %code mint.json
  \:

%pre
  %code.plaintext
    :escaped
      {
        ...

        "dependencies": {
          "mint-textarea-counter": {
            "repository": "https://github.com/mint-lang/mint-textarea-counter",
            "constraint": "1.0.0 <= v < 2.0.0"
          }
        }
      }

%p
  I'll explain what the code above means:

%ul
  %li
    we have defined the dependency:
    %code mint-textarea-counter
    (this must match the
    %code name
    field in the packages
    %code mint.json
    )

  %li
    we specified which Git repository it lives in using the
    %code repository
    field
  %li
    we specified the version constraint in the
    %code constraint
    field

%p
  After that we only need to install the dependencies with the
  %code mint install
  command:

%pre
  %code.plaintext
    :escaped
      ➜  test git:(master) ✗ mint install
      Mint - Installing dependencies
      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
      ⚙ Constructing dependency tree...
        ✔ Cloned mint-textarea-counter(https://github.com/mint-lang/mint-textarea-counter.git)

      ⚙ Resolving dependency tree...
        ◈ mint-textarea-counter ➔ 1.0.0

      ⚙ Copying packages...
      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
      All done in 1.231s!

%p
  And then we can use the component the same way if it was defined in the project:

%pre
  %code
    :escaped
      component Main {
        state value : String = "Initial value..."

        fun handleChange (value : String) : Promise(Never, Void) {
          next { value = value }
        }

        fun render : Html {
          <Textarea.Counter
            onChange={handleChange}
            value={value}/>
        }
      }

%p
  Here you can find the repository:
  %br
  %a(href="https://www.github.com/mint-lang/mint-textarea-counter ")
    https://www.github.com/mint-lang/mint-textarea-counter

%p
  That's it for today, thank you for reading 🙏
