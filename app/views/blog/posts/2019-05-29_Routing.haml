- set_meta_tags title: "Blog / Routing"

%p
  In JavaScript land you would use a third party routing library like
  %a(href="https://github.com/ReactTraining/react-router") react-router
  ,
  %a(href="https://github.com/vuejs/vue-router") vue-router
  or something similar (depending on the framework) to handle changes in the URL.

%p
  In Mint, routing is built into to language itself ðŸŽ‰ so there is one less
  dependency to worry about.

%h2 Defining routes

%p
  You can use the
  %code routes
  block to define routes:

%pre
  %code
    :escaped
      routes {
        /path/to/match {
          /* Do something here... */
        }

        /an/other/path/to/match {
          /* Do something here... */
        }
      }

%p
  Basically you just define the
  %b path you want to match
  and in
  %b a block what should happen when that path is matched.

%p
  There two things to keep in mind:

%ul
  %li routes are matched from top to bottom
  %li only one route matches per navigation event

%h2 Matching parameters

%p
  You can use the standard colon parameters (
  %code :param
  ) for path variables:

%pre
  %code
    :escaped
      routes {
        /posts/:id (id : String) {
          /* Do something with the id here... */
        }

        /posts/:id/comments/:comment (id : String, comment : String) {
          /* Do something with the id and comment here... */
        }
      }

%p.hint.hint--info
  = octicon "info"
  %span
    The order of the variables does not matter but the names must match.

%p
  You can even match hash and query parameters:

%pre
  %code
    :escaped
      routes {
        /posts?page=:page (page : String) {
          /* Do something with the page here... */
        }

        /#:hash (hash : String) {
          /* Do something with the hash here... */
        }
      }

%h2 Matching all (not defined) paths

%p
  Using the
  %code *
  block matches all (non defined) paths:

%pre
  %code
    :escaped
      routes {
        * {
          /* Matches anything. Useful for displaying a 404 page. */
        }
      }

%p.hint.hint--info
  = octicon "info"
  %span
    It does not matter where this block is, it will always match last.

%h2 Navigating to a new URL

%p
  In Mint the language takes care of the navigation, all you have to do is
  render normal anchor tags
  %code
    :escaped
      <a href="/path/to/navigate"></a>
  and the runtime will do the rest:

%ul
  %li
    if the
    %code href
    attribute matches a route it will navigate to it and call the block without
    reloading the page, otherwise it will navigate to the URL normally

  %li
    browser specific behavior is kept:

    %ul
      %li
        if the default behavior was prevented with
        %a(href="https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault")
          preventDefault
        it does not navigate

      %li
        %code ctrl
        click opens the URL in a new tab (if applicable)

%p.hint.hint--info
  = octicon "info"
  %span
    If you are interested in the actual implementation you can find it
    = succeed "." do
      %a(href="https://github.com/mint-lang/mint-runtime/blob/master/source/Program.js#L9")
        here

%h2 Practical usage and example

%p
  In a real application what I usually do is to have an
  %code enum
  that represents all the pages that can occur like this:

%pre
  %code
    :escaped
      enum Page {
        NotFound
        Register
        Initial
        Login
        Home
      }

%p
  I also have a store called
  %code Application
  with a state for the page:

%pre
  %code
    :escaped
      store Application {
        state page : Page = Page::Initial

        fun setPage(page : Page) : Promise(Never, Void) {
          next { page = page }
        }
      }

%p
  Then in the
  %code Main
  component I use that state to render the different pages:

%pre
  %code
    :escaped
      component Main {
        connect Application exposing { page }

        fun render : Html {
          <div>
            <div>
              <a href="/register">"Register"</a>
              <a href="/login">"Login"</a>
              <a href="/asdf">"404"</a>
              <a href="/">"Home"</a>
            </div>

            <hr/>

            case (page) {
              Page::Register => <div>"Register"</div>
              Page::NotFound => <div>"404"</div>
              Page::Login => <div>"Login"</div>
              Page::Home => <div>"Home"</div>
              Page::Initial => <div></div>
            }
          </div>
        }
      }

%p
  And in the routes set the pages accordingly:

%pre
  %code
    :escaped
      routes {
        /register {
          Application.setPage(Page::Register)
        }

        /login {
          Application.setPage(Page::Login)
        }

        / {
          Application.setPage(Page::Home)
        }

        * {
          Application.setPage(Page::NotFound)
        }
      }

%p
  And that is pretty much it ðŸŽ‰ here you can find a repository with the actual
  code:
  %br
  %a(href="https://github.com/mint-lang/mint-example-routing")
    https://github.com/mint-lang/mint-example-routing
